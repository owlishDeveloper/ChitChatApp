import java.time.Instant;
import java.util.Date;
import java.util.Set;
import java.util.UUID;

/**
 * This class represents messages that client and server exchange.
 *
 * There are 6 possible kinds of messages
 * (all represented by this type because I don't want 6 tiny classes).
 *
 * The class has constructors for only 4 of those,
 * because the first two kinds are always generated by clients.
 * We need to be able to serialize and deserialize those messages, however,
 * therefore they are included in this combined type.
 *
 * ---- Messages generated by clients: ----
 *
 * // Sent when user sends a message to the chat. Broadcasted
 * type: "message",
 * text: "some text typed in by the user",
 * id: clientID,
 * date: 2349875459,
 * username: "someUsername" // added by the server
 *
 * // Sent when user changes their displayed username in the chat. Broadcasted
 * type: "username"
 * username: "someUsername1",
 * newUsername: "someUsername2",
 * id: clientID,
 * date: 2349875459
 *
 *  ---- Messages generated by server: ----
 *
 * // Sent when chosen username had to be uniquified due to being already in use.
 * type: "rejectusername",
 * username: "usernameGeneratedByServerAndEnsuredUnique"
 * id: clientID
 *
 * // Sent during the process of logging the user into the chat to set the clientId
 * type: "id",
 * id: clientID
 *
 * // Sent after changing the userlist to update it for users. Broadcasted
 * type: "userlist",
 * users: []
 *
 * // Sent when user decides to leave the chat or when the websocket is closed. Broadcasted
 * type: "userleft",
 * username: "username",
 * users: [],
 * id: clientID,
 * date: 2349875459
 */

public class Message { // abstract class, and then actual subclasses
    public String type; // enum
    public UUID id;
    public long date; // represents the amount of ms passed since Jan 1, 1970
    public String username;
    public Set<String> users;
    public String text;
    public String newUsername;

    public Message(UUID id) {
        this.type = "id";
        this.id = id;
    }

    public Message(Set<String> users) {
        this.type = "userlist";
        this.users = users;
    }

    public Message(String username, UUID id) {
        this.type = "rejectusername";
        this.username = username;
        this.id = id;
    }

    public Message(String username) {
        this.type = "userleft";
        this.username = username;
        this.date = Instant.now().toEpochMilli();
    }
}

//serialize() {
//    object.toString.toBuytes
//}

// put seria;lize and deserialize method here
// //or in WebSocket length

// try to re-implement this in rust and haskell
